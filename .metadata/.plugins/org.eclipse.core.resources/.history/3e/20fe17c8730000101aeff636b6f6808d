// 객체지향 프로그래밍의 특징 
	// 1) 프로그램의 독립적인 단위인 객체들을 모아서 처리 
	// 2) 각각의 객체는 메시지를 주고 받으며 데이터를 처리
	// 3) 객체지향 프로그래밍에서는 추상화, 캡슐화, 상속, 다형성을 활용 

// 추상화 (Abstraction)
	// 
package day12;

public class Polymorphism {
	public static void main(String[] args) {
		// Cat, Dog, Eagle, Human
		Cat c = new Cat();
		Dog d = new Dog();
		Eagle e = new Eagle();
		Human h = new Human();
		
		c.move();
		d.move(); d.dogMove();
		e.move(); e.flying();
		h.move(); h.working();
		
		System.out.println("<부모 객체로 자식 객체를 생성>");
		Animal a = new Cat(); Animal a1 = new Dog(); 
		Animal a2 = new Eagle(); Animal a3 = new Human();
		
		// 자식 객체로 부모 객체 생성 불가능 
		// Human h1 = new Animal(); 은 Error
		
		a.move();
		
		// 부모 객체로 자식 객체 생성 시 자식 객체의 메소드 사용 불가능
		// 따라서, a1.dogMove(); 은 Error
		a1.move();  
		
		// 상속을 받지 않은 객체는 생성 불가능 
	}
}



class Animal{
	public void move() { System.out.println("Moooooooove-___-"); }
}

// Cat
class Cat extends Animal{
	public void move() { System.out.println("야옹-___-"); }
}

// Dog
class Dog extends Animal {
	@Override
	public void move() { System.out.print("멍멍-___- "); }
	
	public void dogMove() { System.out.println("🐕🐕🐕"); }
}

// Eagle
class Eagle extends Animal {
	@Override
	public void move() { System.out.print("flyyyyyyyyyyy "); }
	
	public void flying() { System.out.println("🕊️🕊️🕊️"); }
}

// Human
class Human extends Animal {
	@Override
	public void move() { System.out.print("workkkkkkkkk "); }
	
	public void working() { System.out.println("🚶‍♂️🚶‍♂️🚶‍♂️"); }
}

class Robot{ public void move() { System.out.println("전기가 필요합니다"); } }
